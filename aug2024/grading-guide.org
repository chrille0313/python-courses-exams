* Q1

def advance(t):
    (h,m) = t           # 5 for the data structure
    m = m + 10  
    if m > 60:         # 10 for the algorithm.
        h=h+1
        m=m-60
    return (h,m)

- using while also ok
- -5 for each mistake. (forgetting to increment hour, etc.)

* Q2

load:
- open file (2)
- for each line (2)
- split (2)
- append (2)
- using ints for start/stop (2)

tabulate:
- padding (2)
- outer for (2)
- inner for (2)
- range (2)
- append (2)

* Q3

#+begin_src python
  class Tracker:
      def __init__(self,now):
          self.open = {}                                         # 3 points for using dict
          self.done = []                                         # 2 points for using list
          self.time = now                                        # 1 point for this attribute correctly set
      def tick(self,n):                           
          self.time = self.time + n                              # 1 point
      def start(self,task):                           
          if task in self.open:                                  # 2 points
              print("Warning: task already started").
          self.open[task] = self.time                            # 2 points
      def stop(self,task):
          if task not in self.open:                              # 2 points
              print("Warning: task not started")
          else:
              self.done.append((self.open[task],self.time,task)) # 3 points
              self.open.pop(task)                                # 3 points
      def stop_all(self):
          for t,start in self.open.items():                      # 2 points
              self.done.append((start,self.time,t))
           self.open = {}                                        # 2 points
      def print_tasks(self):
          if len(self.open) > 0:                                 # 1 points
              print("Warning: there are currently open tasks")
          for (start,stop,task) in self.done:                    # 1 points
              print(start,stop,task)
#+end_src
